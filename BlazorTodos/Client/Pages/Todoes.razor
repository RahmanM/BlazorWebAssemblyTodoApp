@page "/"
@using BlazorTodos.Shared
@using BlazorTodos.Server.Data
@using BlazorTodos.Client.Components 
@inject HttpClient Http
@inject IJSRuntime JsRuntime


<h1>Todoes</h1>

<p><a href="Todos_Add">Add New Todo</a></p>

<Spinner SpinWhile=@(todoes == null) />

@if (todoes != null)
{
<table class="table">
    <thead>
        <tr>
            <th>Description</th>
            <th>Category</th>
            <th>Done?</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var todo in todoes)
        {
            <tr>
                <td>@todo?.Description</td>
                <td>@todo?.Category</td>
                <td>
                    @(todo?.Complete == true ? "Yes" : "No")
                </td>
                <td>
                    <a href="javascript: void(0);" @onclick="(() => deleteTodo(todo.Id))"><i class="far fa-trash-alt"></i></a> |
                    <a href="javascript: void(0);" @onclick="(() => flipComplete(todo.Id))"><i class="fas fa-check"></i></a>
                </td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    private TodoViewModel[] todoes;

    protected override async Task OnInitializedAsync()
    {
        await PopulateTodos();
    }

    protected async Task PopulateTodos()
    {
        todoes = await Http.GetFromJsonAsync<TodoViewModel[]>("/api/todoes");
    }

    async Task deleteTodo(int id)
    {
        if (id > 0)
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            if (confirmed)
            {
                await Http.DeleteAsync("/api/todoes/" + id);
                await PopulateTodos();
            }
        }

    }

    async Task flipComplete(int id)
    {
        if (id > 0)
        {

            HttpContent httpContent = new StringContent(id.ToString());
            await Http.PutAsync("/api/todoes/" + id, httpContent);
            await PopulateTodos();
        }

    }

}
